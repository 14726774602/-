全局对象
	NODEJS:global
		在交互模式下，声明的比昂两和创建的函数都是全局对象下的，可以使用global来访问
		在脚本模式下，文件中声明的变量和创建的函数不是全局对象下的，不是能使global来访问
		在浏览器下，文件中声明的变量和创建的函数是全局对象下的，可以使用window来访问
		global.console.log(1)在全局对象下运行	
		window.console.log(1)在浏览器对象下运行

	console对象
		global.console.log(1);//打印日志
		global.console.info(1);//打印消息
		global.console.warn(1);//打印警告
		global.console.error(1);//打印错误
		global.console.time('自定字符串');//开始计时
			for(){}
		global.console.timeEnd('自定字符串');//结束计时
			可以计算循环的计算时间，自定义字符串前后保持一致
		
	process对象
		process.arch		//查看CPU架构	X64
		process.platform	//查看操作系统	win32
		process.env		//查看当前的环境变量有哪些	
		process.version		//查看当前nodejs的版本号
		process.pid		//查看当前的进程编号
		process.kill(进程编号)	//结束进程编号所代表的进程
	
	Buffer	缓冲区：在内存中存储数据的区域，存储网络中传输的资源，临时的
		var buf=Buffer.alloc(n,'数据')	//创建buff对象，n代表对象空间的大小，后面的数据是存储的数据
		buf.toString()		//将Buffer对象的数据转换成字符串

模块系统
	模块在NODEJS下分为 自定义模块 核心模块 第三方模块	
	定义好的功能体，在nodejs下，每一个js文件都是一个模块，文件中的代码默认是被一个构造函数所包含的
		function(exports,require,module,__filename,__dirname){
			//程序员在文件中写的代码就在此区域
		}
		console.log(__filename);	//显示文件的完整路径和文件名称
		console.log(__dirname);		//文件的完整路劲，不含名称
		require('路径');		//引入路径所在的模块文件
		module.exports.n=a		//导出当前模块的对象（公开的内容），可以供其他模块使用的属性和方法。
			exports 等价于 module.exports
文件模块
	require（'./文件名'），仅用于同级目录下
		常用语胡勇自定义模块，如果后缀名是js是可以省略后缀名
目录模块
	require（'./文件夹名'）
		会在同级目录下的文件夹中寻找package.json文件中的main属性所对应的值，该值为要导出的功能
		模块文件的名字，如果不存在，则自动寻找index.js文件
	require（'文件夹名'）
		要求引入的目录出现在 node_modules中，如果找不到，则会到上一级目录中查找，直到顶层C盘，
		常用与第三方模块
第三方模块(包)
	自动下载地址	http://www.npmjs.com
	需要已经安装好npm,随着nodejs一起安装
	切换到下载目录
		打开命令行窗口 输入 cd 完整路径
		直接在在下载目录下 shift + 单击右键 打开powershell窗口
	使用npm安装
		npm install 包的名称

核心模块
	是NODEJS官方提供的模块，可以直接引入，不需要创建	
		查询字符串模块--querystring
			浏览器向服务器发送请求，传递数据的一种方式
				协议   域名（ip）	端口
				heep:///www.codeboy.com:80/product_details.html?
				lid=5$name=dell
			const querystring=require('querystring');	//引入字符串模块
			querystring.parse(字符串)		将查询字符串解析为对象
			querystring.stringify(对象)	//将对象转换为字符串
		url模块
			const url=require('url');	//引入url模块
			url.parse(url)		//将url解析为对象
				  protocol: 'http:',	//协议	
				  port: '80',	//端口号
				  hostname: 'www.codeboy.com',	//域名	
				  query: 'name=tom&id=3',	//查询字符串
				  pathname: query: 'name=tom&id=3',	//查询字符串
			url.format(url对象);		//将url对象转换为url
				protocol: 'http:',	//协议	
				port: '80',	//端口号
				hostname: 'www.codeboy.com',	//域名	
				pathname: query: 'name=tom&id=3',	//查询字符串
				query: {name:'tom' id:3}	//查询字符串

	一次性定时器
		var timer=setTimeout(function(){时间到了需要执行的语句},间隔时间（毫秒）);
	清楚定时器
		clearTimeout(timer);
	周期性定时器
		var timer=setInterval(function(){间隔时间所执行的语句},间隔时间);
	清除定时器
		clearInterval(timer);
	立即执行定时器(了解)
		timer=process.nextTick(回调函数)
			在事件的结尾执行
		timer=setImmediate(回调函数)
			在下一组事件的开头执行
		清除
			clearImmediate(timer);
	文件系统模块
		用于操作服务器文件（目录），例：创建目录，删除目录，读取目录，创建/删除文件，写入文件。。。。
		创建目录
			fs.mkdir(路径，(err)=>{
				//如果有错误就抛出
				if(err){
					throw err;
				}
			})
		移除目录
			fs.rmdir()
		读取目录
			fs.readdir(路径,回调函数)	--异步
			fs.readdirSync(路径)		--同步
		
		对比异步和同步的区别
			同步会阻止后续代码的执行，只有执行完，以后的代码才会执行；是通过回调函数来获取结果
			异步不会阻止后续代码的执行，在整个程序的最后执行	
		写入文件
			fs.writeFile(路径,写入数据,回调函数)
			如果文件不存在，则会创建文件，然后写入数据；如果文件存在，则会清空内容，然后写入
		删除文件
			fs.unlink(路径,回调函数);
		判断文件是否存在
			fs.existsSync(路径);
		追加写入	具有创建文件的功能，如果文件存在，则在文件末尾追加写入数据
			fs.appendFile(路径,'写入数据',回调函数)
		读取文件	读取的文件存储在data中，
			fs.readFile(路径,(err,data)=>{
				if(err){
					throw err;
				}
				return data=data.toString;
			})

http协议
	通用头信息
		Request URL:请求的URL，向服务器端获取的内容
		Request Method:请求的方法 get/post get获取内容，post常用语向服务器端传递安全较高的数据
		Status Code:响应的状态
			2**: 服务器成功的响应
			3**: 响应的重定向，跳转到另一个URL
			4**: 客户端错误
			5**: 服务器错误
			   Remote Address: 请求的服务器的IP地址和端口号

	响应头信息
		Connection: keep-alive; 连接的方式：持续连接
		Content-Type: 响应的文件类型
		Transfer-Encoding: 响应时的传输方式，chunked（分段传输）

	请求头信息
		Accpet: 客户端接受的文件类型有哪些
		Connection: 客户端和服务器端的连接方式
		User-Agent: 客户端使用的浏览器

	请求主体	
		可有可无，浏览器向服务器端传递的数据

	http模块
		http.get(url,(res)=>{
				//参数	响应的对象
				res.statusCode	响应的状态码
				res.on('data',(buf){
					通过事件来获取服务器端响应额数据，当有数据的时候，自动调用函数，把数据放入buf中，格式为buffer
				})
		})	
				
第三方模块
		const express=require('express')	引入第三方模块 
		var server=http.createServer	//创建web服务器
		server.listen(3000)	//分配端口，监听3000端口的变化
		server.on('request',(req,res)=>{})	//接收浏览器的请求，是事件的形式，一旦有请求，自动执行
			req	请求的对象
				url	请求的URL
				method	请求的方法，直接在地址栏输入默认的都是get
				headers	请求的头信息
				query	获取请求时，以查询字符串传递数据，返回对象

			res	响应的对象
				writeHead(状态码300,{Location:要跳转的url})	
					设置响应的状态码和头信息，如果要跳转，需要在{}中设置Location:属性
				write()		将响应的数据发送到浏览器中
				end()	结束响应

	express框架
	基于NODEJS，用于构建web服务器的框架
		官网 www.expressjs.com.cn
		安装	
			命令窗口：npm install express
			const express=require('express');	//引入第三方模块
			var server=express();	//创建web服务器
			server.listen(3000);	//监听端口
		路由
			响应对象(res)
				浏览器向web服务器发送请求，web服务器会根据请求的URL和请求的方法来做出响应
				res.send()	响应文本，每个路由只能使用一次send；如果是没加引号的数字，会被认为是状态码
				res.sendFile(url)	响应文件
				res.redirect(url)	跳转到其他页面	
			请求对象(req)
				url	请求的URL
				method	请求的方法，直接在地址栏输入默认的都是get
				headers	请求的头信息
				query	获取请求时，以查询字符串传递数据，返回对象
			post和get请求
				get请求以查询字符串的形式传递数据，服务器使用req.query获取数据，结果是对象；
				post请求是通过表单提交方式传递数据，服务器端通过事件形式来获取数据（后期有简单方法）
					req.on('data',(buf)=>{
						//结果为buffer数据，转成普通字符串后变成查询字符串，需要使用查询字符串模块解析为对象
						var str=buf.toString();
						var obj=querystring.parse(str);
						
					})
				server.get('/datail/:对象属性1/:对象属性2....',(req,res)=>{
					//:lid	设置数据的名称
					req.params	//获取浏览器端通过url传递过来的对象
				})	
				浏览器传递数据
					http:127.0.0.1:3000/属性值1/:属性值2....
		中间件
			应用级中间件
				server.use(函数)	拦截所有的路由
				server.use('url',函数)	拦截特定的路由
				server.use(express.static('目录'))	把静态资源文件托管到某个
			
			第三方中间件body-parser
				可以将post请求的数据解析为对象
					const bodyParser=require('body=parser')
					server.use(bodyParser.urlencoded({
						extended:false	//不使用第三方的qs模块，而是使用核心模块querystring将数据解析为对象
					}))
				在路由中获取数据
					req.body	//返回对象格式

		mysql模块
			
			创建链接对象
			var pool=mysql.createConnection({
				host:'127.0.0.1',	IP地址/域名
				port:'3306',	端口
				user:'root',	用户名
				passwored:'',	密码
				database:'tedu',	使用的数据库	
			});
			pool.connect();执行连接
			pool.query(sql,callback)	sql表示要执行的SQL语句，callback表示回调函数，获取SQL语句的结果
			pool.end()	执行完所有的SQL语句，关闭连接





路由及路由器
	主页面
		const express=require('express');	引入第三方模块
			var server=express();	创建web服务器
				server.listen(3001)	设置链接服务器端口
				serve.use(bodyParser.urlendoded)({extended:false}	设置中间件，在路由中获取数据对象，不使用第三方的qs模块，而是使用核心模块querstring将数据解析为对象
				server.use(express.static('url'))	托管静态资源，访问时可通过端口3001/url	访问托管资源
		const userRouter=require('url');	引入用户自定义路由器资源文件
			server.use('url',userRouter);	将路由器挂载到web服务器，浏览器可通过url访问到引入的路由器资源文件
	连接池页面
		const mysql=require('mysql');	创建连接池,引入第三方模块mysql
			创建链接
			var pool=mysql.createPool({
				host:'127.0.0.1',	服务器地址
				port:'3306',	服务器端口
				user:'root',	服务器名
				password:'',	服务器密码
				database:'xz',	要链接的数据库
				connectionLimit:20	连接池的数量
			});	
		module.exports=pool;	导出连接池对象	
	模块页面
		const express=require('express');	引入第三方模块
		const pool=require('url')	//引入mysql连接池模块
			var router=express.Router();	创建空的路由对象
			router.get('url',(req,res)=>{
				var obj=req.query	获取浏览器端get方式传递的数据，并且转换为字符串对象
				pool.query('sql语句',[obj],(err,result)=>{})	执行SQL语句，并返回结果保存到result中，数据类型为字符串对象
			})
			router.post('url',(req,res)=>{
				var obj=req.body	获取浏览器端post方式传递的数据，并且转换为字符串对象
				pool.query('sql语句',[obj],(err,result)=>{})	执行SQL语句，并返回结果保存到result中，数据类型为字符串对象
			})
		module.exports=router;	导出路由器对象








