string中的API
	查找
		var i=str.index('关键字',[start])	//在str中从start位置开始查找‘关键字’的位置，省略则从0开始，返回一个所在的下标，没有返回-1
		var i=str.search(/正则/i)	//在str中寻找满足正则的一个敏感字，返回下标，没有返回-1  i>忽略大小写
		var arr=str.match(/正则/i)	//寻找敏感字，返回一个数组 arr:['0':'敏感字','index':下标]	找不到返回null 只能找一个
		var arr=str.match(/正则/ig)	//寻找满足的所有敏感字，只能得到内容，得不到位置	g>全局/全部
		var arr=/正则/.exec(str)	//查找所有满足条件的敏感字，返回内容和对应下标，需要反复调用才行，一次只能查找一个

	替换
		简单替换
			str=str.replace(/正则/ig,'新值')	//将满足正则的所有关键字替换成新值	//无权修改为原来的字符串，返回新的字符串，必须手动赋值给原变量
		高级替换
			str=str.replace(/正则/ig,function(kword){
				return '新值'
			})	//根据每次找到的kword不同，每次找到，返回一个新值，替换当前关键字的位置
			

	切割
		var arr=str.split('切割符')	将str按照指定的切割符，切割为多段字符串，保存在数组arr中
			常用	var arr=str.split('')
		复杂切割
			var arr=str.split(/正则/i)	按照满足条件的切割符切割
	
	验证
		var bool=reg.test(str)	用正则reg，检测str是否满足正则的格式要求	只要找到部分满足都会返回true，只需要在正则前后加^和$ 表示从头到尾的意思
	删除
		var str= str.trim()	用于删除字符串开头和结尾的空白


	/表达式/i  	忽略大小写
	/表达式/g	多次搜寻或提取匹配模式,全局匹配
	/表达式/gi	全局忽略大小写

	xx.		通配符 匹配任何一个字符
	/b[aeo]g/	字符集搜索  括号内定义一个方式  来查找你所需要的字符 列：  想要"bag"、"big"和"bug"，但是不想匹配"bog"。可以这样创建 /b[aiu]g/ 来匹配
	[a-e]  [0-5]	- 连字符   用于定义要匹配字符的范围
	/[^aeiou]/gi	^ 否定字符集 在字符集[]之内 匹配所有非满足条件的字符  字符  .、!、[、@、/  和  空白字符等也会被匹配
	/^[aeiou]xxx/gi	^ 匹配字符串开头 在字符集[]之外 
	/xxxx$/gi	$ 匹配字符串结尾
   	/a+/g		+ 匹配一次或连续多次的字符	a出现一次或多次
	/a*/g		* 匹配零次或连续多次的字符	a出现零次或多次
	/t[a-z]*i/	贪婪匹配 匹配以  t开头 i结尾的字符  匹配满足该条件的最大字符串
	/t[a-z]*?i/	懒惰匹配 匹配以  t开头 i结尾的字符  匹配满足该条件的最短字符串
	/\w/		\w 匹配字符串的字母和数字 等价与 [A-Za-z0-9_] 注意还会匹配到下划线字符 _
	/\W/		\W 匹配字符串的非字母和数字 等价 ^[A-Za-z0-9] 不会匹配到下划线字符 _ 
	/[^\w]/		匹配到所有非字母数字的字符 
	/\d/		匹配到所有的0-9的数字
	/\D/		匹配到所有的非数字的字符
	/\s/		匹配空白 此匹配模式不仅匹配空格，还匹配回车符、制表符、换页符和换行符	类似与/[\r\t\f\n\v]/
	/\S/		匹配所有的非空白字符	类似与/[^\r\t\f\n\v]/
	/ab{1,9}c/	数量说明符	匹配出现多少次的上限和下限
	/ab{1,}c/	数量说明符	匹配出现多少次的下限
	/ab{3}c/	数量说明符	匹配出现的确切数量
	/favou?rite/	检查全部或无	? 前面的字符可以有也可以没有
	/(?=\w{3,6})/;	正向先行断言	匹配满足条件的字符串
	/(?!=\w{3,6})/;	负向先行断言	匹配不满足条件的字符串
	/(?=\w{3,6})(?=\D*\d)/		匹配满足两个条件的字符串
	/^(\d+)\s\1\s\1$/	捕获组 \1 替换了 (\d+) 这个表达式